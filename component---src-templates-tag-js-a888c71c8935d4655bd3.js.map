{"version":3,"file":"component---src-templates-tag-js-a888c71c8935d4655bd3.js","mappings":"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","sources":["webpack://gatsby-starter-developer-diary/./src/components/sidebar/Bio.js","webpack://gatsby-starter-developer-diary/./src/components/sidebar/SocialLinks.js","webpack://gatsby-starter-developer-diary/./src/components/sidebar/TechTags.js","webpack://gatsby-starter-developer-diary/./src/components/sidebar/Sidebar.js","webpack://gatsby-starter-developer-diary/./src/components/tags/TechTag.js","webpack://gatsby-starter-developer-diary/./src/templates/tag.js"],"sourcesContent":["import React from \"react\"\nimport \"./sidebar.css\"\n\nimport profile from \"../../images/profile.png\"\n\nconst Bio = ({ author, tagline }) => {\n  return (\n    <div className=\"bio-main w-75\">\n      <img\n        src={profile}\n        style={{ maxWidth: `100px` }}\n        className=\"profile-img\"\n        alt=\"\"\n      />\n      <h3 className=\"mt-2 author-bio\">{author}</h3>\n      <small className=\"text-muted\">{tagline}</small>\n    </div>\n  )\n}\n\nexport default Bio\n","import React from \"react\"\nimport { FaGithubSquare } from \"react-icons/fa\"\nimport \"./sidebar.css\"\n\nconst SocialLinks = ({ contacts }) => {\n  return (\n    <div className=\"side-social-links float-left mt-3 mb-3\">\n      <a className=\"text-secondary p-2\" href={contacts.github}>\n        <span title=\"GitHub\">\n          <FaGithubSquare size={26} style={{ color: \"secondary\" }} />\n        </span>\n      </a>\n    </div>\n  )\n}\n\nexport default SocialLinks\n","import React from \"react\"\n\nimport TechTag from \"../tags/TechTag\"\n\nconst TechTags = props => {\n  const labels = props.labels\n  const posts = props.posts\n\n  const labelCount = labels.map(label => {\n    let count = 0\n    posts.forEach(post => {\n      if (post.node.frontmatter.tags.includes(label.tag)) {\n        count = count + 1\n      }\n    })\n    return [label.tag, count]\n  })\n\n  const categories = labelCount.filter(label => {\n    return label[1] > 0\n  })\n\n  const tags = categories.map(category => {\n    return category[0]\n  })\n\n  const getTechTags = tags => {\n    const techTags = []\n    tags.forEach((tag, i) => {\n      labels.forEach(label => {\n        if (tag === label.tag) {\n          techTags.push(\n            <TechTag\n              key={i}\n              tag={label.tag}\n              tech={label.tech}\n              name={label.name}\n              size={label.size}\n              color={label.color}\n            />\n          )\n        }\n      })\n    })\n    return techTags\n  }\n\n  return (\n    <>\n      <h4>Tech Topics</h4>\n      <div className=\"d-block\">{getTechTags(tags)}</div>\n    </>\n  )\n}\n\nexport default TechTags\n","import React from \"react\"\nimport { StaticQuery, graphql, Link } from \"gatsby\"\nimport Bio from \"./Bio\"\nimport \"./sidebar.css\"\n\nimport SocialLinks from \"./SocialLinks\"\nimport TechTags from \"./TechTags\"\n\nconst Sidebar = () => {\n  return (\n    <StaticQuery\n      query={graphql`\n        query SiteBioQuery {\n          site {\n            siteMetadata {\n              title\n              tagline\n              author\n              contacts {\n                github\n              }\n              labels {\n                tag\n                tech\n                name\n                size\n                color\n              }\n            }\n          }\n          allMarkdownRemark(\n            limit: 10\n            sort: { fields: [frontmatter___date], order: DESC }\n            filter: { frontmatter: { published: { eq: true } } }\n          ) {\n            edges {\n              node {\n                frontmatter {\n                  tags\n                }\n              }\n            }\n          }\n        }\n      `}\n      render={data => (\n        <>\n          <div className=\"sidebar-main border-right\">\n            <Bio\n              author={data.site.siteMetadata.author}\n              tagline={data.site.siteMetadata.tagline}\n            />\n            <SocialLinks contacts={data.site.siteMetadata.contacts} />\n            <div className=\"page-links\">\n              <Link to=\"/\">\n                <span className=\"text-dark d-block py-1\">Blog Home</span>\n              </Link>\n              <Link to=\"/about\">\n                <span className=\"text-dark d-block py-1\">About</span>\n              </Link>\n              <Link to=\"/projects\">\n                <span className=\"text-dark d-block py-1\">Projects</span>\n              </Link>\n              <Link to=\"/archive\">\n                <span className=\"text-dark d-block py-1\">Archive</span>\n              </Link>\n            </div>\n            <div className=\"tech-tags mt-4\">\n              <TechTags\n                labels={data.site.siteMetadata.labels}\n                posts={data.allMarkdownRemark.edges}\n              />\n            </div>\n          </div>\n        </>\n      )}\n    />\n  )\n}\n\nexport default Sidebar\n","import React from \"react\"\n\nimport \"./tags.css\"\nimport { Link } from \"gatsby\"\n\nconst TechTag = props => {\n  const { tag, tech, name, size, color } = props\n\n  return (\n    <div className=\"d-inline-block p-1\">\n      <Link to={`/tags/${tag}/`}>\n        <button className=\"tech-tag text-white\">\n          <p className=\"d-inline\">{tech} </p>\n          <div className=\"d-inline\" style={{ fontSize: size, color: color }}>\n            <svg\n              role=\"img\"\n              viewBox=\"0 0 24 24\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n              width={size}\n              height={size}\n              style={{ fill: `${color}` }}\n            >\n              <title>{tech}</title>\n              <path d={name} />\n            </svg>\n          </div>\n        </button>\n      </Link>\n    </div>\n  )\n}\n\nexport default TechTag\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Link, graphql } from \"gatsby\"\nimport \"bootstrap/dist/css/bootstrap.css\"\nimport \"../pages/index.css\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport Sidebar from \"../components/sidebar/Sidebar\"\nimport TechTag from \"../components/tags/TechTag\"\n\nconst Tag = ({ pageContext, data }) => {\n  const posts = data.allMarkdownRemark.edges\n  const labels = data.site.siteMetadata.labels\n  console.log(pageContext.tag)\n  const { tag } = pageContext\n  const { totalCount } = data.allMarkdownRemark\n  const tagHeader = `${totalCount} post${\n    totalCount === 1 ? \"\" : \"s\"\n  } tagged with \"${tag}\"`\n\n  const getTechTags = tags => {\n    const techTags = []\n    tags.forEach((tag, i) => {\n      labels.forEach(label => {\n        if (tag === label.tag) {\n          techTags.push(\n            <TechTag\n              key={i}\n              tag={label.tag}\n              tech={label.tech}\n              name={label.name}\n              size={label.size}\n              color={label.color}\n            />\n          )\n        }\n      })\n    })\n    return techTags\n  }\n\n  return (\n    <Layout>\n      <SEO\n        title=\"Home\"\n        keywords={[\n          `gatsby`,\n          `javascript`,\n          `react`,\n          `web development`,\n          `node.js`,\n          `graphql`,\n        ]}\n      />\n      <div className=\"index-main\">\n        <div className=\"sidebar px-4 py-2\">\n          <Sidebar />\n        </div>\n\n        <div className=\"post-list-main\">\n          <i>\n            <h2 className=\"heading\">{tagHeader}</h2>\n          </i>\n          {posts.map(post => {\n            const tags = post.node.frontmatter.tags\n            return (\n              <div key={post.node.id} className=\"container mt-5\">\n                <Link to={post.node.fields.slug} className=\"text-dark\">\n                  <h2 className=\"heading\">{post.node.frontmatter.title}</h2>\n                </Link>\n                <small className=\"d-block text-info\">\n                  Posted on {post.node.frontmatter.date}\n                </small>\n                <p className=\"mt-3 d-inline\">{post.node.excerpt}</p>\n                <Link to={post.node.fields.slug} className=\"text-primary\">\n                  <small className=\"d-inline-block ml-3\"> Read full post</small>\n                </Link>\n                <div className=\"d-block\">{getTechTags(tags)}</div>\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    </Layout>\n  )\n}\n\nTag.propTypes = {\n  pageContext: PropTypes.shape({\n    tag: PropTypes.string.isRequired,\n  }),\n  data: PropTypes.shape({\n    allMarkdownRemark: PropTypes.shape({\n      totalCount: PropTypes.number.isRequired,\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            frontmatter: PropTypes.shape({\n              title: PropTypes.string.isRequired,\n            }),\n          }),\n        }).isRequired\n      ),\n    }),\n  }),\n}\n\nexport const pageQuery = graphql`\n  query($tag: String) {\n    site {\n      siteMetadata {\n        title\n        author\n        labels {\n          tag\n          tech\n          name\n          size\n          color\n        }\n      }\n    }\n    allMarkdownRemark(\n      limit: 2000\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { tags: { in: [$tag] } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          excerpt(pruneLength: 200)\n          html\n          id\n          frontmatter {\n            title\n            date(formatString: \"MMMM, YYYY\")\n            tags\n          }\n          fields {\n            slug\n          }\n        }\n      }\n    }\n  }\n`\n\nexport default Tag\n"],"names":["author","tagline","className","src","profile","style","maxWidth","alt","contacts","href","github","title","size","color","props","labels","posts","tags","map","label","count","forEach","post","node","frontmatter","includes","tag","filter","category","techTags","i","push","TechTag","key","tech","name","getTechTags","StaticQuery","query","render","data","site","siteMetadata","Link","to","allMarkdownRemark","edges","fontSize","role","viewBox","xmlns","width","height","fill","d","pageContext","console","log","totalCount","tagHeader","keywords","id","fields","slug","date","excerpt"],"sourceRoot":""}
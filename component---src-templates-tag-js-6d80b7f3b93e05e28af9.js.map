{"version":3,"sources":["webpack:///./src/components/sidebar/Bio.js","webpack:///./src/components/sidebar/SocialLinks.js","webpack:///./src/components/sidebar/TechTags.js","webpack:///./src/components/sidebar/Sidebar.js","webpack:///./src/templates/tag.js","webpack:///./src/components/tags/TechTag.js"],"names":["Bio","author","tagline","className","src","profile","style","maxWidth","alt","SocialLinks","contacts","href","github","title","size","color","TechTags","props","labels","posts","tags","map","label","count","forEach","post","node","frontmatter","includes","tag","filter","category","techTags","i","push","TechTag","key","tech","name","getTechTags","Sidebar","query","render","data","site","siteMetadata","to","allMarkdownRemark","edges","Tag","pageContext","console","log","totalCount","tagHeader","keywords","id","fields","slug","date","excerpt","fontSize","role","viewBox","xmlns","width","height","fill","d"],"mappings":"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","file":"component---src-templates-tag-js-6d80b7f3b93e05e28af9.js","sourcesContent":["import React from \"react\"\nimport \"./sidebar.css\"\n\nimport profile from \"../../images/profile.png\"\n\nconst Bio = ({ author, tagline }) => {\n\n    return (\n        <div className=\"bio-main w-75\">\n            <img src={profile} style={{ maxWidth: `100px` }} className=\"profile-img\" alt=\"\" />\n            <h3 className=\"mt-2 author-bio\">{author}</h3>\n            <small className=\"text-muted\">{tagline}</small>\n        </div>\n    )\n}\n\nexport default Bio","import React from \"react\"\nimport {\n  FaLinkedin,\n  FaGithubSquare,\n  FaStackOverflow,\n  FaFreeCodeCamp,\n  FaTwitterSquare,\n} from \"react-icons/fa\"\nimport \"./sidebar.css\"\n\nconst SocialLinks = ({ contacts }) => {\n  return (\n    <div className=\"side-social-links float-left mt-3 mb-3\">\n      <a className=\"text-secondary p-2\" href={contacts.github}>\n        <span title=\"GitHub\">\n          <FaGithubSquare size={26} style={{ color: \"secondary\" }} />\n        </span>\n      </a>\n    </div>\n  )\n}\n\nexport default SocialLinks\n","import React from \"react\"\n\nimport TechTag from \"../tags/TechTag\"\n\nconst TechTags = (props) => {\n    const labels = props.labels\n    const posts = props.posts\n\n    const labelCount = labels.map(label => {\n        let count = 0;\n        posts.forEach(post => {\n            if (post.node.frontmatter.tags.includes(label.tag)) {\n                count = count + 1\n            }\n        })\n        return [label.tag, count]\n    })\n\n    const categories = labelCount.filter(label => {\n        return label[1] > 0\n    })\n\n    const tags = categories.map(category => {\n        return category[0]\n    })\n\n\n\n    const getTechTags = (tags) => {\n        const techTags = []\n        tags.forEach((tag, i) => {\n            labels.forEach((label) => {\n                if (tag === label.tag) {\n                    techTags.push(<TechTag key={i} tag={label.tag} tech={label.tech} name={label.name} size={label.size} color={label.color} />)\n                }\n            })\n        })\n        return techTags\n    }\n\n\n    return (\n        <>\n            <h4>Tech Topics</h4>\n            <div className=\"d-block\">\n                {getTechTags(tags)}\n            </div>\n        </>\n    )\n}\n\n\nexport default TechTags","import React from \"react\"\nimport { StaticQuery, graphql, Link } from \"gatsby\"\nimport Bio from \"./Bio\"\nimport \"./sidebar.css\"\n\nimport SocialLinks from \"./SocialLinks\"\nimport TechTags from \"./TechTags\"\n\n\nconst Sidebar = () => {\n    return (\n        <StaticQuery\n            query={graphql`\n                query SiteBioQuery {\n                    site {\n                        siteMetadata {\n                            title\n                            tagline\n                            author\n                            contacts {\n                                github\n                            }\n                            labels {\n                                tag\n                                tech\n                                name \n                                size \n                                color\n                            }\n                        }\n                    }\n                    allMarkdownRemark(\n                        limit: 10\n                        sort: { fields: [frontmatter___date], order: DESC }\n                        filter: { frontmatter: { published: { eq: true } } }\n                    ) {\n                        edges {\n                            node {\n                                frontmatter {\n                                    tags\n                                }\n                            }\n                        }\n                    }\n                }\n            `}\n            render={data => (\n                <>\n                    <div className=\"sidebar-main border-right\">\n                        <Bio author={data.site.siteMetadata.author} tagline={data.site.siteMetadata.tagline} />\n                        <SocialLinks contacts={data.site.siteMetadata.contacts} />\n                        <div className=\"page-links\">\n                            <Link to=\"/\"><span className=\"text-dark d-block py-1\">Blog Home</span></Link>\n                            <Link to=\"/about\"><span className=\"text-dark d-block py-1\">About</span></Link>\n                            <Link to=\"/archive\"><span className=\"text-dark d-block py-1\">Archive</span></Link>\n                        </div>\n                        <div className=\"tech-tags mt-4\">\n                            <TechTags labels={data.site.siteMetadata.labels} posts={data.allMarkdownRemark.edges} />\n                        </div>\n                    </div>\n                </>\n            )}\n        />\n    )\n}\n\nexport default Sidebar","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Link, graphql } from \"gatsby\"\nimport \"bootstrap/dist/css/bootstrap.css\"\nimport \"../pages/index.css\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport Sidebar from \"../components/sidebar/Sidebar\"\nimport TechTag from \"../components/tags/TechTag\"\n\nconst Tag = ({ pageContext, data }) => {\n    const posts = data.allMarkdownRemark.edges\n    const labels = data.site.siteMetadata.labels\n    console.log(pageContext.tag)\n    const { tag } = pageContext\n    const { totalCount } = data.allMarkdownRemark\n    const tagHeader = `${totalCount} post${\n        totalCount === 1 ? \"\" : \"s\"\n        } tagged with \"${tag}\"`\n\n    const getTechTags = (tags) => {\n        const techTags = []\n        tags.forEach((tag, i) => {\n            labels.forEach((label) => {\n                if (tag === label.tag) {\n                    techTags.push(<TechTag key={i} tag={label.tag} tech={label.tech} name={label.name} size={label.size} color={label.color} />)\n                }\n            })\n        })\n        return techTags\n    }\n\n    return (\n        <Layout>\n            <SEO title=\"Home\" keywords={[`gatsby`, `javascript`, `react`, `web development`, `node.js`, `graphql`]} />\n            <div className=\"index-main\">\n                <div className=\"sidebar px-4 py-2\">\n                    <Sidebar />\n                </div>\n\n                <div className=\"post-list-main\">\n                    <i><h2 className=\"heading\">{tagHeader}</h2></i>\n                    {posts.map((post) => {\n                        const tags = post.node.frontmatter.tags\n                        return (\n                            <div key={post.node.id} className=\"container mt-5\">\n                                <Link\n                                    to={post.node.fields.slug}\n                                    className=\"text-dark\"\n                                >\n                                    <h2 className=\"heading\">{post.node.frontmatter.title}</h2>\n                                </Link>\n                                <small className=\"d-block text-info\">Posted on {post.node.frontmatter.date}\n                                </small>\n                                <p className=\"mt-3 d-inline\">{post.node.excerpt}</p>\n                                <Link\n                                    to={post.node.fields.slug}\n                                    className=\"text-primary\"\n                                >\n                                    <small className=\"d-inline-block ml-3\"> Read full post</small>\n                                </Link>\n                                <div className=\"d-block\">\n                                    {getTechTags(tags)}\n                                </div>\n                            </div>\n                        )\n                    })}\n                </div>\n            </div>\n        </Layout>\n    )\n}\n\nTag.propTypes = {\n    pageContext: PropTypes.shape({\n        tag: PropTypes.string.isRequired,\n    }),\n    data: PropTypes.shape({\n        allMarkdownRemark: PropTypes.shape({\n            totalCount: PropTypes.number.isRequired,\n            edges: PropTypes.arrayOf(\n                PropTypes.shape({\n                    node: PropTypes.shape({\n                        frontmatter: PropTypes.shape({\n                            title: PropTypes.string.isRequired,\n                        }),\n                    }),\n                }).isRequired\n            ),\n        }),\n    }),\n}\n\nexport const pageQuery = graphql`\n  query($tag: String) {\n    site {\n        siteMetadata {\n            title \n            author\n            labels {\n                tag\n                tech \n                name \n                size \n                color\n            } \n        }\n    } \n    allMarkdownRemark(\n      limit: 2000\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { tags: { in: [$tag] } } }\n    ) {\n      totalCount\n      edges {\n         node {\n            excerpt(pruneLength: 200)\n            html\n            id\n            frontmatter {\n                title\n                date(formatString: \"MMMM, YYYY\")\n                tags\n            }\n             fields {\n                slug\n            }\n        }\n      }\n    }\n  }\n`\n\nexport default Tag","import React from \"react\"\n\nimport \"./tags.css\"\nimport { Link } from \"gatsby\";\n\nconst TechTag = (props) => {\n    const { tag, tech, name, size, color } = props\n\n    return (\n        <div className=\"d-inline-block p-1\">\n            <Link to={`/tags/${tag}/`}>\n                <button\n                    className=\"tech-tag text-white\">\n                    <p className=\"d-inline\">{tech} </p>\n                    <div className=\"d-inline\" style={{ fontSize: size, color: color }}><svg role=\"img\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\" width={size} height={size} style={{fill: `${color}`}}>\n                            <title>{tech}</title>\n                            <path\n                                d={name} />\n                        </svg></div>\n                </button>\n            </Link>\n\n        </div>\n\n    )\n}\n\nexport default TechTag"],"sourceRoot":""}
{"version":3,"file":"component---src-pages-archive-js-258efc59f63eb758557d.js","mappings":"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","sources":["webpack://gatsby-starter-developer-diary/./src/components/sidebar/Bio.js","webpack://gatsby-starter-developer-diary/./src/components/sidebar/TechTags.js","webpack://gatsby-starter-developer-diary/./src/components/sidebar/Sidebar.js","webpack://gatsby-starter-developer-diary/./src/components/tags/TechTag.js","webpack://gatsby-starter-developer-diary/./src/pages/archive.js","webpack://gatsby-starter-developer-diary/./src/utils/index.js"],"sourcesContent":["import React from \"react\"\nimport \"./sidebar.css\"\n\nimport profile from \"../../images/profile.png\"\n\nconst Bio = ({ author, tagline }) => {\n  return (\n    <div className=\"bio-main w-75\">\n      <img\n        src={profile}\n        style={{ maxWidth: `100px` }}\n        className=\"profile-img\"\n        alt=\"\"\n      />\n      <h3 className=\"mt-2 author-bio\">{author}</h3>\n      <small className=\"text-muted\">{tagline}</small>\n    </div>\n  )\n}\n\nexport default Bio\n","import React from \"react\"\n\nimport TechTag from \"../tags/TechTag\"\n\nconst TechTags = ({ labels, posts }) => {\n  var taglist = posts.map(post => {\n    return {\n      value: post.node.frontmatter.title,\n    }\n  })\n  console.log(taglist)\n\n  const labelCount = labels.map(label => {\n    let count = 0\n    posts.forEach(post => {\n      if (post.node.frontmatter.tags.includes(label.tag)) {\n        console.log(post.node.frontmatter.tags)\n        count = count + 1\n      }\n    })\n    return [label.tag, count]\n  })\n\n  const categories = labelCount.filter(label => {\n    console.log(label)\n    return label[1] > 0\n  })\n\n  const tags = categories.map(category => {\n    return category[0]\n  })\n\n  const getTechTags = tags => {\n    const techTags = []\n    tags.forEach((tag, i) => {\n      labels.forEach(label => {\n        if (tag === label.tag) {\n          techTags.push(\n            <TechTag\n              key={i}\n              tag={label.tag}\n              tech={label.tech}\n              name={label.name}\n              size={label.size}\n              color={label.color}\n              count\n            />\n          )\n        }\n      })\n    })\n    return techTags\n  }\n\n  return (\n    <>\n      <h4>Tech Topics</h4>\n      <div className=\"d-block\">{getTechTags(tags)}</div>\n    </>\n  )\n}\n\nexport default TechTags\n","import React from \"react\"\nimport { StaticQuery, graphql, Link } from \"gatsby\"\nimport Bio from \"./Bio\"\nimport \"./sidebar.css\"\n\nimport SocialLinks from \"./SocialLinks\"\nimport TechTags from \"./TechTags\"\n\nconst Sidebar = () => {\n  return (\n    <StaticQuery\n      query={graphql`\n        query SiteBioQuery {\n          site {\n            siteMetadata {\n              title\n              tagline\n              author\n              labels {\n                tag\n                tech\n                name\n                size\n                color\n              }\n            }\n          }\n          allMarkdownRemark(\n            limit: 10\n            sort: { fields: [frontmatter___date], order: DESC }\n            filter: { frontmatter: { published: { eq: true } } }\n          ) {\n            edges {\n              node {\n                frontmatter {\n                  tags\n                }\n              }\n            }\n          }\n        }\n      `}\n      render={data => (\n        <>\n          <div className=\"sidebar-main border-right\">\n            <Bio\n              author={data.site.siteMetadata.author}\n              tagline={data.site.siteMetadata.tagline}\n            />\n            <div className=\"page-links\">\n              <Link to=\"/\">\n                <span className=\"d-block py-1 link-dark\">Blog Home</span>\n              </Link>\n              <Link to=\"/projects\">\n                <span className=\"d-block py-1 link-dark\">Projects</span>\n              </Link>\n              <Link to=\"/archive\">\n                <span className=\"d-block py-1 link-dark\">Archive</span>\n              </Link>\n            </div>\n            <div className=\"tech-tags mt-4\">\n              <TechTags\n                labels={data.site.siteMetadata.labels}\n                posts={data.allMarkdownRemark.edges}\n              />\n            </div>\n          </div>\n        </>\n      )}\n    />\n  )\n}\n\nexport default Sidebar\n","import React from \"react\"\n\nimport \"./tags.css\"\nimport { Link } from \"gatsby\"\n\nconst TechTag = props => {\n  const { tag, tech, name, size, color, count } = props\n\n  return (\n    <div className=\"d-inline-block p-1\">\n      <Link to={`/tags/${tag}/`}>\n        <button className=\"tech-tag text-white\">\n          <p className=\"d-inline\">{tech} </p>\n          <div className=\"d-inline\" style={{ fontSize: size, color: color }}>\n            <svg\n              role=\"img\"\n              viewBox=\"0 0 24 24\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n              width={size}\n              height={size}\n              style={{ fill: `${color}` }}\n            >\n              <title>{tech}</title>\n              <path d={name} />\n            </svg>\n          </div>\n        </button>\n      </Link>\n    </div>\n  )\n}\n\nexport default TechTag\n","import React from \"react\"\nimport { Link, graphql } from \"gatsby\"\nimport \"bootstrap/dist/css/bootstrap.css\"\nimport \"./index.css\"\nimport { getTimeDiff } from '../utils'\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport Sidebar from \"../components/sidebar/Sidebar\"\nimport TechTag from \"../components/tags/TechTag\"\n\nconst ArchivePage = ({ data }) => {\n  const posts = data.allMarkdownRemark.edges\n  const labels = data.site.siteMetadata.labels\n\n  const getTechTags = tags => {\n    const techTags = []\n    tags.forEach((tag, i) => {\n      labels.forEach(label => {\n        if (tag === label.tag) {\n          techTags.push(\n            <TechTag\n              key={i}\n              tag={label.tag}\n              tech={label.tech}\n              name={label.name}\n              size={label.size}\n              color={label.color}\n            />\n          )\n        }\n      })\n    })\n    return techTags\n  }\n\n  return (\n    <Layout>\n      <SEO\n        title=\"Archive\"\n        keywords={[\n          `gatsby`,\n          `javascript`,\n          `react`,\n          `web development`,\n          `blog`,\n          `graphql`,\n        ]}\n      />\n      <div className=\"index-main\">\n        <div className=\"sidebar px-4 py-2\">\n          <Sidebar />\n        </div>\n        <div className=\"post-list-main\">\n          <h2 className=\"heading mt-3\">All Posts</h2>\n          {posts.map(post => {\n            const tags = post.node.frontmatter.tags\n            return (\n              <div key={post.node.id} className=\"container mt-5\">\n                <Link to={post.node.fields.slug} className=\"text-dark\">\n                  <h2 className=\"title\">{post.node.frontmatter.title}</h2>\n                </Link>\n                <small className=\"d-block text-info\">\n                  <i> {getTimeDiff(post.node.frontmatter.date)}</i>\n                </small>\n                <p className=\"mt-3 d-inline\">{post.node.excerpt}</p>\n                <Link to={post.node.fields.slug} className=\"text-primary\">\n                  <small className=\"d-inline-block ml-3\"> Read full post</small>\n                </Link>\n                <div className=\"d-block\">{getTechTags(tags)}</div>\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    </Layout>\n  )\n}\n\nexport const pageQuery = graphql`\n  query ArchiveQuery {\n    site {\n      siteMetadata {\n        title\n        author\n        labels {\n          tag\n          tech\n          name\n          size\n          color\n        }\n      }\n    }\n    allMarkdownRemark(\n      limit: 1000\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { published: { eq: true } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          excerpt(pruneLength: 200)\n          html\n          id\n          frontmatter {\n            title\n            date(formatString: \"MMMM DD, YYYY\")\n            tags\n          }\n          fields {\n            slug\n          }\n        }\n      }\n    }\n  }\n`\n\nexport default ArchivePage\n","const getTimeDiff = value => {\n  const today = new Date()\n  const timeValue = new Date(value)\n\n  const timeDiff = Math.floor(\n    (today.getTime() - timeValue.getTime()) / 1000 / 60\n  )\n  if (timeDiff < 1) return \"방금전\"\n  if (timeDiff < 60) {\n    return `${timeDiff}분전`\n  }\n\n  const hour = Math.floor(timeDiff / 60)\n  if (hour < 24) {\n    return `${hour}시간전`\n  }\n\n  const days = Math.floor(hour / 24)\n  if (days < 7) {\n    return `${days}일전`\n  }\n  const weeks = days / 7\n  if (weeks < 5) return `${Math.floor(weeks)}주 전`\n  const months = days / 30\n  if (months < 12) return `${Math.floor(months)}개월 전`\n  const years = days / 365\n  return `${Math.floor(years)}년 전`\n}\n\nexport { getTimeDiff }\n"],"names":["author","tagline","className","src","profile","style","maxWidth","alt","labels","posts","taglist","map","post","value","node","frontmatter","title","console","log","tags","label","count","forEach","includes","tag","filter","category","techTags","i","push","TechTag","key","tech","name","size","color","getTechTags","StaticQuery","query","render","data","site","siteMetadata","Link","to","allMarkdownRemark","edges","props","fontSize","role","viewBox","xmlns","width","height","fill","d","keywords","id","fields","slug","getTimeDiff","date","excerpt","today","Date","timeValue","timeDiff","Math","floor","getTime","hour","days","weeks","months","years"],"sourceRoot":""}